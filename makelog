srcs/libft.cpp:261:37: error: comparison of integers of different signs: 'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::size_type' (aka 'unsigned long') and 'int' [-Werror,-Wsign-compare]
                        if (max_size != -1 && ret.size() > static_cast<int>(max_size))
                                              ~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.
srcs/main.cpp:3:37: error: unused parameter 'env' [-Werror,-Wunused-parameter]
int main(int ac, char *av[], char **env)
                                    ^
1 error generated.
srcs/Server.cpp:93:40: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        m_manager->fdSet(m_fd, ServerManager::SetType::READ_SET);
                                              ^
srcs/Server.cpp:194:13: error: return type of out-of-line definition of 'Server::get_m_request_uri_limit_size' differs from that in the declaration
int Server::get_m_request_uri_limit_size() const { return (this->m_request_uri_limit_size); }
~~~         ^
includes/Server.hpp:52:10: note: previous declaration is here
                size_t get_m_request_uri_limit_size() const;
                ~~~~~~ ^
srcs/Server.cpp:195:13: error: return type of out-of-line definition of 'Server::get_m_request_header_limit_size' differs from that in the declaration
int Server::get_m_request_header_limit_size() const { return (this->m_request_header_limit_size); }
~~~         ^
includes/Server.hpp:53:10: note: previous declaration is here
                size_t get_m_request_header_limit_size() const;
                ~~~~~~ ^
srcs/Server.cpp:196:13: error: return type of out-of-line definition of 'Server::get_m_limit_client_body_size' differs from that in the declaration
int Server::get_m_limit_client_body_size() const { return (this->m_limit_client_body_size); }
~~~         ^
includes/Server.hpp:54:10: note: previous declaration is here
                size_t get_m_limit_client_body_size() const;
                ~~~~~~ ^
srcs/Server.cpp:265:11: error: comparison of integers of different signs: 'int' and 'unsigned long' [-Werror,-Wsign-compare]
                if (idx != path.size() - 1)
                    ~~~ ^  ~~~~~~~~~~~~~~~
srcs/Server.cpp:286:7: error: unused variable 'buff' [-Werror,-Wunused-variable]
        char buff[1024];
             ^
srcs/Server.cpp:285:12: error: unused variable 't' [-Werror,-Wunused-variable]
        struct tm t;
                  ^
srcs/Server.cpp:305:55: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        return (m_manager->fdIsset(client_fd, ServerManager::SetType::ERROR_COPY_SET));
                                                             ^
srcs/Server.cpp:312:47: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        m_manager->fdClear(client_fd, ServerManager::SetType::READ_SET);
                                                     ^
srcs/Server.cpp:314:45: error: if statement has empty body [-Werror,-Wempty-body]
        if (m_manager->get_m_max_fd() >= client_fd);
                                                   ^
srcs/Server.cpp:314:45: note: put the semicolon on a separate line to silence this warning
srcs/Server.cpp:321:50: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        return (m_manager->fdIsset(m_fd, ServerManager::SetType::READ_COPY_SET));
                                                        ^
srcs/Server.cpp:344:45: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        m_manager->fdSet(client_fd, ServerManager::SetType::READ_SET);
                                                   ^
srcs/Server.cpp:361:53: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
                if (response.get_m_connection_type() == Response::ConnectionType::CLOSE)
                                                                  ^
srcs/Server.cpp:401:55: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
                                if (!m_manager->fdIsset(it->first, ServerManager::SetType::WRITE_SET))
                                                                                  ^
srcs/Server.cpp:455:25: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        if (method == Request::Method::TRACE)
                               ^
srcs/Server.cpp:457:48: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        else if (request.get_m_uri_type() == Request::URIType::DIRECTORY)
                                                      ^
srcs/Server.cpp:459:48: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        else if (request.get_m_uri_type() == Request::URIType::CGI_PROGRAM)
                                                      ^
srcs/Server.cpp:461:30: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        else if (method == Request::Method::GET)
                                    ^
srcs/Server.cpp:463:30: error: use of enumeration in a nested name specifier is a C++11 extension [-Werror,-Wc++11-extensions]
        else if (method == Request::Method::HEAD)
                                    ^
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
make: *** [ServerManager.o] Error 1
